#+title: Tabspaces
#+author: Colin McLear
#+language: en
#+export_file_name: tabspaces.texi
#+texinfo_dir_category: Emacs
#+texinfo_dir_title: Tabspaces: (tabspaces).
#+texinfo_dir_desc: Worspaces using tab-bar and project.el 

#+html: <a href="https://www.gnu.org/software/emacs/"><img alt="GNU Emacs" src="https://github.com/minad/corfu/blob/screenshots/emacs.svg?raw=true"/></a>
#+html: <a href="https://melpa.org/#/tabspaces"><img alt="MELPA" src="https://melpa.org/packages/tabspaces-badge.svg"/></a>

Tabspaces leverages [[https://github.com/emacs-mirror/emacs/blob/master/lisp/tab-bar.el][tab-bar.el]] and [[https://github.com/emacs-mirror/emacs/blob/master/lisp/progmodes/project.el][project.el]] (both built into emacs 27+) to
create buffer-isolated workspaces (or "tabspaces") that also integrate with your
version-controlled projects. It should work with emacs 27+. It is tested to work
with a single frame workflow, but should work with multiple frames as well. 

While other great packages exist for managing workspaces, such as [[https://github.com/alphapapa/bufler.el][bufler]],
[[https://github.com/nex3/perspective-el][perspective]] and [[https://github.com/Bad-ptr/persp-mode.el][persp-mode]], this package is much less complex, and works
entirely based on the built-in (to emacs 27+) tab-bar and project packages. If
you like simple, this may be the workspace package for you. That said, bufler,
perspective or persp-mode, etc. may better fit your needs.

** Basic Usage

Calling the function =tabspaces-create-workspace= generates a new buffer-isolated
workspace using =tab.el= in the background. Using =tabspaces-switch-buffer= (for
=consult= integration see below) will only show buffers in the workspace (but
list-buffers, ibuffer, etc. will show all buffers). Adding buffers to a
workspace is as simple as opening the buffer in the workspace. Delete buffers
from a workspace either by killing them or using one of either
=tabspaces-remove-selected-buffer= or =tabspaces-remove-current-buffer=. Removed
buffers are still available from the default tabspace. Control this with the
variable =tabspaces-remove-to-default=. Switch or create workspaces via
=tabspaces-switch-to-or-create-workspace= (or =tab-bar-switch-tab=). You can close a
workspace by invoking =tabspaces-close-workspace= or =tab-bar-close-tab=. You can
close a workspace and kill all buffers associated with it using
=tabspaces-kill-buffers-close-workspace=.

You may also open an existing version-controlled project in its own workspace
using =tabspaces-open-existing-project-and-workspace=, and create projects
in their own workspace using =tabspaces-create-new-project-and-workspace=. 

*NOTE* that this package does not modify =tab-bar=, =tab-line=, or =project= in any way.
It simply adds convenience functions for use with those packages. So it is still
up to the user to configure tabs, etc., however they like.  

** Installation

You may install this package either from Melpa (=M-x package-install tabspaces
RET=) or by cloning this repo and adding it to your load-path. 

** Setup

Here's one possible way of setting up the package using [[https://github.com/jwiegley/use-package][use-package]] (and
[[https://github.com/raxod502/straight.el][straight]], if you use that).

#+begin_src emacs-lisp
(use-package tabspaces
  ;; use this next line only if you also use straight, otherwise ignore it. 
  :straight (:type git :host github :repo "mclear-tools/tabspaces")
  :hook (after-init . tabspaces-mode) ;; use this only if you want the minor-mode loaded at startup. 
  :commands (tabspaces-create-workspace
             tabspaces-create-new-project-and-workspace
             tabspaces-open-existing-project-and-workspace
             tabspaces-switch-workspace)
  :custom
  (tabspaces-use-filtered-buffers-as-default t)
  (tabspaces-default-tab "Default")
  (tabspaces-remove-to-default t)
  (tabspaces-include-buffers '("*scratch*")))
#+end_src

*** Keybindings 
Workspace Keybindings are defined in the following variable:

#+begin_src emacs-lisp
(defvar tabspaces-prefix-map
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd "C-c C-w c") 'tabspaces-create-workspace)
    (define-key map (kbd "C-c C-w C") 'tabspaces-clear-buffers)
    (define-key map (kbd "C-c C-w b") 'tabspaces-switch-to-buffer)
    (define-key map (kbd "C-c C-w d") 'tabspaces-close-workspace)
    (define-key map (kbd "C-c C-w k") 'tabspaces-kill-buffers-close-workspace)
    (define-key map (kbd "C-c C-w n") 'tabspaces-create-new-project-and-workspace)
    (define-key map (kbd "C-c C-w o") 'tabspaces-open-existing-project-and-workspace)
    (define-key map (kbd "C-c C-w r") 'tabspaces-remove-current-buffer)
    (define-key map (kbd "C-c C-w R") 'tabspaces-remove-selected-buffer)
    (define-key map (kbd "C-c C-w s") 'tabspaces-switch-to-or-create-workspace)
    map)
  "Keymap for tabspace/workspace commands.")
#+end_src

*** Buffer Filtering

When =tabspaces-mode= is enabled use =tabspaces-switch-to-buffer= to choose from a
filtered list of only those buffers in the current tab/workspace. Though nil by
default, when =tabspaces-use-filtered-buffers-as-default= is set to 't' and
=tabspaces-mode= is enabled, =switch-to-buffer= is globally remapped to
=tabspaces-switch-to-buffer=, and thus only shows those buffers in the current
workspace. For use with =consult-buffer=, see below.

*** Additional Customization

**** Consult

If you have [[https://github.com/minad/consult][consult]] installed you might want to implement the following in your
config to have workspace buffers in =consult-buffer=:

#+begin_src emacs-lisp
  ;; Filter Buffers for Consult-Buffer

  (with-eval-after-load 'consult
  ;; hide full buffer list (still available with "b" prefix)
  (consult-customize consult--source-buffer :hidden t :default nil)
  ;; set consult-workspace buffer list
  (defvar consult--source-workspace
    (list :name     "Workspace Buffers"
          :narrow   ?w
          :history  'buffer-name-history
          :category 'buffer
          :state    #'consult--buffer-state
          :default  t
          :items    (lambda () (consult--buffer-query
                           :predicate #'tabspaces-local-buffer-p
                           :sort 'visibility
                           :as #'buffer-name)))

    "Set workspace buffer list for consult-buffer.")
  (add-to-list 'consult-buffer-sources 'consult--source-workspace))
#+end_src

This should seamlessly integrate workspace buffers into =consult-buffer=,
displaying workspace buffers by default and all buffers when narrowing using
"b". Note that you can also see all project related buffers and files just by
narrowing with "p" in [[https://github.com/minad/consult#configuration][a default consult setup]].

**** Included Buffers

By default the =*scratch*= buffer is included in all workspaces. You can modify
which buffers are included by changing the value of =tabspaces-include-buffers=.

If you want emacs to startup with initial buffers in a workspace (something I
find works well) you could do something like the following:

#+begin_src emacs-lisp
  (defun my--tabspace-setup ()
    "Set up tabspace at startup."
    ;; Add *Messages* and *splash* to Tab \`Home\'
    (tabspaces-mode 1)
    (progn
      (tab-bar-rename-tab "Home")
      (when (get-buffer "*Messages*")
        (set-frame-parameter nil
                             'buffer-list
                             (cons (get-buffer "*Messages*")
                                   (frame-parameter nil 'buffer-list))))
      (when (get-buffer "*splash*")
        (set-frame-parameter nil
                             'buffer-list
                             (cons (get-buffer "*splash*")
                                   (frame-parameter nil 'buffer-list))))))

  (add-hook 'after-init-hook #'my--tabspace-setup)
#+end_src



** Acknowledgments
Code for this package is directly derived from, or otherwise inspired by, a
variety of sources. These include:

- The original buffer filter function
   + https://www.rousette.org.uk/archives/using-the-tab-bar-in-emacs/
   + https://github.com/wamei/elscreen-separate-buffer-list/issues/8
   + https://github.com/kaz-yos/emacs
- Buffer filtering and removal
   + https://github.com/florommel/bufferlo
- Consult integration
   + https://github.com/minad/consult#multiple-sources
